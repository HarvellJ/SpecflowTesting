// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FeedbackAndMarkingSystem.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ValidateCommentFeature : Xunit.IClassFixture<ValidateCommentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CommentValidation.feature"
#line hidden
        
        public ValidateCommentFeature(ValidateCommentFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ValidateComment", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Comment Type single Input validation")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateComment")]
        [Xunit.TraitAttribute("Description", "Comment Type single Input validation")]
        [Xunit.InlineDataAttribute("ABC-123456", "Sample title 123 !@#", "Sample comment 123 !@#", "Adjustment", "4", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("ABC-12345", "Sample title 123 !@#", "Sample comment 123 !@#", "Adjustment", "4", "false", "Assignment Code must be 10 characters", new string[0])]
        [Xunit.InlineDataAttribute("ABC-1234567", "Sample title 123 !@#", "Sample comment 123 !@#", "Adjustment", "4", "false", "Assignment Code must be 10 characters", new string[0])]
        [Xunit.InlineDataAttribute("", "Sample title 123 !@#", "Sample comment 123 !@#", "Adjustment", "4", "false", "Assignment Code is mandatory and must be 10 characters", new string[0])]
        [Xunit.InlineDataAttribute("ABC-123456", "", "Sample comment 123 !@#", "Adjustment", "4", "false", "Title field is mandatory", new string[0])]
        [Xunit.InlineDataAttribute("ABC-123456", "Sample title 123 !@#", "Sample comment 123 !@#", "Adjustment", "4", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("ABC-123456", "Sample title 123 !@#", "", "Adjustment", "4", "false", "Comment Text field is mandatory", new string[0])]
        [Xunit.InlineDataAttribute("ABC-123456", "Sample title 123 !@#", "Sample comment 123 !@#", "", "0", "false", "Comment type field is mandatory", new string[0])]
        public virtual void CommentTypeSingleInputValidation(string assignmentCode, string title, string commentText, string commentType, string value, string result, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comment Type single Input validation", null, exampleTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
testRunner.Given(string.Format("the assessor has specified {0} for the assignment code", assignmentCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
testRunner.And(string.Format("they have specified {0} as the title", title), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
testRunner.And(string.Format("they have specified {0} for the comment text", commentText), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
testRunner.And(string.Format("they have selected {0} as the comment type", commentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
testRunner.And(string.Format("they have entered {0} for Comment Type value", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
testRunner.When("they click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
testRunner.Then(string.Format("the result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
testRunner.And(string.Format("the message is \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Grade Band comment type Input validation")]
        [Xunit.TraitAttribute("FeatureTitle", "ValidateComment")]
        [Xunit.TraitAttribute("Description", "Grade Band comment type Input validation")]
        [Xunit.InlineDataAttribute("-1", "0", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "1", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "2", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "50", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "99", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "100", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("-1", "101", "false", "Lower Grade band value must be >= 0", new string[0])]
        [Xunit.InlineDataAttribute("0", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("0", "1", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("0", "2", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("0", "50", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("0", "99", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("0", "100", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("0", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        [Xunit.InlineDataAttribute("1", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("1", "1", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("1", "50", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("1", "99", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("1", "100", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("1", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        [Xunit.InlineDataAttribute("50", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("50", "1", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("50", "2", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("50", "50", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("50", "99", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("50", "100", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("50", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        [Xunit.InlineDataAttribute("98", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("98", "1", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("98", "2", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("98", "50", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("98", "99", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("98", "100", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("98", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        [Xunit.InlineDataAttribute("99", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("99", "1", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("99", "2", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("99", "50", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("99", "99", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("99", "100", "true", "", new string[0])]
        [Xunit.InlineDataAttribute("99", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        [Xunit.InlineDataAttribute("100", "0", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "1", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "2", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "50", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "99", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "100", "false", "Upper Grade Band value must be > the Lower Grade value", new string[0])]
        [Xunit.InlineDataAttribute("100", "101", "false", "Upper Grade band value must be <=100", new string[0])]
        public virtual void GradeBandCommentTypeInputValidation(string valueLower, string valueUpper, string result, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Grade Band comment type Input validation", null, exampleTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 24
testRunner.Given("the assessor has specified ABC-123456 for the assignment code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
testRunner.And("they have specified Sample title 123 !@# as the title", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.And("they have specified Sample comment 123 !@# for the comment text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
testRunner.And("they have selected Grade Band as the comment type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
testRunner.And(string.Format("they have entered {0} for the Grade Band lower value", valueLower), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
testRunner.And(string.Format("they have entered {0} for the Grade Band upper value", valueUpper), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
testRunner.When("they click submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
testRunner.Then(string.Format("the result is {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
testRunner.And(string.Format("the message is \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ValidateCommentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ValidateCommentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
